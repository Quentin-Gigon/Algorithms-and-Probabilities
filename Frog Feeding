class Main {
  static double[][] DP;
  static double[] flies;
  static double[] probs;
  public static int n,m,k;
  
    public static void main(String[] args) {
        // Uncomment this line if you want to read from a file
        In.open("public/sample.in");
        
        int t = In.readInt();
        for (int i = 0; i < t; i++) {
            testCase();
        }
        
        // Uncomment this line if you want to read from a file
       In.close();
    }
    
   static double solve (int k, int m, int n){
     
      if (k<0||k>n-1) {
        return 0.0;
      }
      
      if (m==0) {
        return flies[k];
      }
      
      if (DP[k][m] != -1) {
        return DP[k][m]; 
      }
      
      DP[k][m] = (double)flies[k]+((probs[k]*solve(k-1,m-1,n))+((1-probs[k])*solve(k+1,m-1,n)));
      return DP[k][m];
    }

    public static void testCase() {
        // Input using In.java class
        n = In.readInt();
        k = In.readInt();
        m = In.readInt();
        
        DP = new double[n][m+1];
        flies = new double[n];
        probs = new double[n];
        
        //Initialize DP Table
        for (int i=0; i<n; i++){
          for(int j=0; j<=m; j++){
            DP[i][j] = -1;
          }
        } 
        
        //Initialize flies array
        for (int i=0;i<n;i++) {
          flies[i] = In.readInt();
        }
        
        //Initialize probs array
        for (int i=0;i<n;i++) {
          probs[i] = In.readDouble();
        }
        
        Out.println(solve(k,m,n));
    }
}
